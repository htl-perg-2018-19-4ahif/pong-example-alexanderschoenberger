{"version":3,"sources":["../src/server/ball.ts"],"names":[],"mappings":"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","file":"ball.js","sourcesContent":["import server = require('./app');\r\n\r\n\r\nlet leftPaddle:number;\r\nlet rightPaddle:number;\r\n\r\ninterface Point {\r\n  x: number;\r\n  y: number\r\n};\r\n\r\ninterface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nenum Direction { top, right, bottom, left, leftPaddle, rightPaddle };\r\n\r\nlet ballFunction = function (clientHeight: number, clientWidth: number, balHeight: number, ballWidth: number, paddleWidth: number, paddleHeight: number, paddleLeft: number) {\r\n\r\n  const ballSize: Size = { width: ballWidth, height: balHeight };\r\n  const ballHalfSize = splitSize(ballSize, 2);\r\n  const clientSize: Size = { width: clientWidth, height: clientHeight };\r\n  const clientHalfSize = splitSize(clientSize, 2);\r\n  let leftPoint = 0;\r\n  let rightPoint = 0;\r\n  \r\n  game();\r\n\r\n\r\n  function reset(): Point {\r\n    return { x: clientHalfSize.width, y: clientHalfSize.height };\r\n  }\r\n\r\n  async function game() {\r\n\r\n    let running: boolean = true;\r\n    console.log('reset ball');\r\n\r\n    let ballCurrentPosition: Point = reset();\r\n    moveBall(ballCurrentPosition);\r\n\r\n    // Random angle between 27.5 and 45 DEG (=PI/8 and PI/4 RAD)\r\n    const angle = Math.PI / 8 + Math.random() * Math.PI / 8;\r\n\r\n    // Direction   0 = upper right, 1 = lower right, 2 = lower left, 3 = upper left\r\n    let quadrant = Math.floor(Math.random() * 4);\r\n    let outside: boolean = false;\r\n    do {\r\n      const targetX = (quadrant === 0 || quadrant === 1) ? clientSize.width - ballSize.width : 0;\r\n      const targetBallPosition: Point = {\r\n        x: targetX,\r\n        y: ballCurrentPosition.y + Math.tan(angle) * Math.abs(targetX - ballCurrentPosition.x) * ((quadrant === 0 || quadrant === 3) ? -1 : 1)\r\n      };\r\n\r\n      const borderTouch = await animateBall(ballCurrentPosition, targetBallPosition);\r\n      // Based on where the ball touched the browser window, we change the new target quadrant.\r\n      // Note that in this solution the angle stays the same.\r\n      outside = false;\r\n      switch (borderTouch.touchDirection) {\r\n        case Direction.left:\r\n          rightPoint++;\r\n          running = server.sendRightPoints(rightPoint);\r\n          outside = true;\r\n          break;\r\n        case Direction.right:\r\n          leftPoint++;\r\n          running = server.sendLeftPoints(leftPoint);\r\n          outside = true;\r\n          break;\r\n        case Direction.top:\r\n          quadrant = (quadrant === 0) ? 1 : 2;\r\n          break;\r\n        case Direction.bottom:\r\n          quadrant = (quadrant === 2) ? 3 : 0;\r\n          break;\r\n        case Direction.leftPaddle:\r\n          quadrant = (quadrant === 2) ? 1 : 0\r\n          break;\r\n        case Direction.rightPaddle: quadrant = (quadrant === 0) ? 3 : 2; break;\r\n        default:\r\n          throw new Error('Invalid direction, should never happen');\r\n\r\n      }\r\n\r\n      // The touch position is the new current position of the ball.\r\n      // Note that we fix the position here slightly in case a small piece of the ball has reached an area\r\n      // outside of the visible browser window.\r\n      ballCurrentPosition.x = Math.min(Math.max(borderTouch.touchPosition.x - ballHalfSize.width, 0) + ballHalfSize.width, clientSize.width);\r\n      ballCurrentPosition.y = Math.min(Math.max(borderTouch.touchPosition.y - ballHalfSize.height, 0) + ballHalfSize.height, clientSize.height);\r\n    } while (!outside);\r\n    if(running){\r\n      game();\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  function animateBall(currentBallPosition: Point, targetBallPosition: Point): Promise<{ touchPosition: Point, touchDirection: Direction }> {\r\n    // Calculate x and y distances from current to target position\r\n    const distanceToTarget: Size = subtractPoints(targetBallPosition, currentBallPosition);\r\n\r\n    // Use Pythagoras to calculate distance from current to target position\r\n    const distance = Math.sqrt(distanceToTarget.width * distanceToTarget.width + distanceToTarget.height * distanceToTarget.height);\r\n\r\n    // Variable defining the speed of the animation (pixels that the ball travels per interval)\r\n    const pixelsPerInterval = 1;\r\n\r\n    // Calculate distance per interval\r\n    const distancePerInterval = splitSize(distanceToTarget, distance * pixelsPerInterval);\r\n\r\n    // Return a promise that will resolve when animation is done\r\n    return new Promise<{ touchPosition: Point, touchDirection: Direction }>(res => {\r\n      // Start at current ball position\r\n      let animatedPosition: Point = currentBallPosition;\r\n\r\n      // Move point every 4ms\r\n      const interval = setInterval(() => {\r\n        // Move animated position by the distance it has to travel per interval\r\n        animatedPosition = movePoint(animatedPosition, distancePerInterval);\r\n\r\n        // Move the ball to the new position\r\n        moveBall(animatedPosition);\r\n\r\n        // Check if the ball touches the browser window's border\r\n        let touchDirection: Direction;\r\n\r\n        if (overlaps(leftPaddle,animatedPosition, paddleWidth, paddleHeight, paddleLeft, ballSize)) {\r\n          console.log('left');\r\n          touchDirection = Direction.leftPaddle;\r\n        }\r\n        if (overlaps(rightPaddle,animatedPosition, paddleWidth, paddleHeight, (clientWidth-paddleLeft), ballSize)) {\r\n          console.log('right');\r\n          touchDirection = Direction.rightPaddle;\r\n        }\r\n        if ((animatedPosition.x - ballHalfSize.width) < 0) { touchDirection = Direction.left; }\r\n        if ((animatedPosition.y - ballHalfSize.height) < 0) { touchDirection = Direction.top; }\r\n        if ((animatedPosition.x + ballHalfSize.width) > clientSize.width) { touchDirection = Direction.right; }\r\n        if ((animatedPosition.y + ballHalfSize.height) > clientSize.height) { touchDirection = Direction.bottom; }\r\n        \r\n        if (touchDirection !== undefined) {\r\n          // Ball touches border -> stop animation\r\n          clearInterval(interval);\r\n          res({ touchPosition: animatedPosition, touchDirection: touchDirection });\r\n        }\r\n      }, 4);\r\n    });\r\n  }\r\n\r\n  /** Move the center of the ball to given position **/\r\n  function moveBall(targetPosition: Point): void {\r\n    // Note the 'px' at the end of the coordinates for CSS. Don't\r\n    // forget it. Without the 'px', it doesn't work.\r\n    const leftPos = targetPosition.x - ballHalfSize.width;\r\n    const topPos = targetPosition.y - ballHalfSize.height;\r\n\r\n    server.sendBallPosition(leftPos, topPos);\r\n  }\r\n\r\n  /** Subtracts two points and returns the size between them */\r\n  function subtractPoints(a: Point, b: Point): Size {\r\n    return {\r\n      width: a.x - b.x,\r\n      height: a.y - b.y\r\n    };\r\n  }\r\n\r\n  /** Moves a point by the given size */\r\n  function movePoint(p: Point, s: Size): Point {\r\n    return {\r\n      x: p.x + s.width,\r\n      y: p.y + s.height\r\n    };\r\n  }\r\n\r\n  /** Divides the width and height of the given size by the given divider */\r\n  function splitSize(s: Size, divider: number): Size {\r\n    return {\r\n      width: s.width / divider,\r\n      height: s.height / divider\r\n    };\r\n  }\r\n};\r\n\r\n\r\nlet overlaps = (function () {\r\n  function getPositions(top:number, width:number, height:number, left:number) {\r\n    return [[left, left + width], [top, top + height]];\r\n  }\r\n\r\n  function comparePositions(p1, p2) {\r\n    let r1, r2;\r\n    r1 = p1[0] < p2[0] ? p1 : p2;\r\n    r2 = p1[0] < p2[0] ? p2 : p1;\r\n    return r1[1] > r2[0] || r1[0] === r2[0];\r\n  }\r\n\r\n  return function (a, b, width, height, left, ballSize) {\r\n    let pos1 = getPositions(a, width, height, left);\r\n    let pos2 = getPositions(b.y, ballSize.width, ballSize.height,b.x);\r\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\r\n  };\r\n})();\r\n\r\nexport function setLeftPaddle(code) {\r\n  leftPaddle = code;\r\n}\r\n\r\nexport function setRightPaddle(code) {\r\n  rightPaddle = code;\r\n}\r\n\r\nexport { ballFunction };"]}